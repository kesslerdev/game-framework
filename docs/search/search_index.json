{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"mermaid.initialize({startOnLoad:true}); Welcome to Quarkit # Quarkit is a collection of stamps using stampit.js . The main goal is composability, for games See it in action # Run an example, it uses all of basic packages for running a clicker game, some resouces, things to buy and some expressions. 1 2 3 4 5 6 7 8 9 10 11 12 # get the source git clone git@github.com:kesslerdev/quarkit.git cd quarkit # bootsrap sub packages yarn ; yarn bootstrap # go to demo cd example/quarkit-example-node # install & start yarn ; yarn start Example # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 // Imports import { Possessor , Purchasable , Resource , ResourceBag , Level , Production , } from 'quarkit-modules' // compose things of this game const Currency = Resource . createQuark ( 'Currency' ) const Shop = Purchasable . compose ( Level , Production , ). createQuark ( 'Shop' ) const Player = ResourceBag . compose ( Possessor ). createQuark ( 'Player' ) // finally your data const cash = Currency ({ name : 'Cash' }) const lemonStand = Shop ({ name : 'LemonStand' , productionTime : 3000 , }) . setPurchaseCost ( currencies . cash , 10 ) . setLevelCost ( currencies . cash , 10 ) . setProduction ( currencies . cash , 'this.level * 4' ) // your player const user = Player ({ name : 'first' }) // give some cash for buying lemonStand user . addResource ( currencies . cash , 10 ) lemonStand . purchaseFor ( user ) // need revert user.buy(lemonStand) // setup gameLoop const loop = GameLoop ({ tps : 10 }) // ticks per second // load user into loop loop . gameObjects . push ( user ) // refresh cash of user every 1000/10=100ms loop . calls . push (() => { console . clear () console . log ( user . resourceBag [ cash . slug ]) }) // let's go loop . start ()","title":"Quarkit"},{"location":"#welcome-to-quarkit","text":"Quarkit is a collection of stamps using stampit.js . The main goal is composability, for games","title":"Welcome to Quarkit"},{"location":"#see-it-in-action","text":"Run an example, it uses all of basic packages for running a clicker game, some resouces, things to buy and some expressions. 1 2 3 4 5 6 7 8 9 10 11 12 # get the source git clone git@github.com:kesslerdev/quarkit.git cd quarkit # bootsrap sub packages yarn ; yarn bootstrap # go to demo cd example/quarkit-example-node # install & start yarn ; yarn start","title":"See it in action"},{"location":"#example","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 // Imports import { Possessor , Purchasable , Resource , ResourceBag , Level , Production , } from 'quarkit-modules' // compose things of this game const Currency = Resource . createQuark ( 'Currency' ) const Shop = Purchasable . compose ( Level , Production , ). createQuark ( 'Shop' ) const Player = ResourceBag . compose ( Possessor ). createQuark ( 'Player' ) // finally your data const cash = Currency ({ name : 'Cash' }) const lemonStand = Shop ({ name : 'LemonStand' , productionTime : 3000 , }) . setPurchaseCost ( currencies . cash , 10 ) . setLevelCost ( currencies . cash , 10 ) . setProduction ( currencies . cash , 'this.level * 4' ) // your player const user = Player ({ name : 'first' }) // give some cash for buying lemonStand user . addResource ( currencies . cash , 10 ) lemonStand . purchaseFor ( user ) // need revert user.buy(lemonStand) // setup gameLoop const loop = GameLoop ({ tps : 10 }) // ticks per second // load user into loop loop . gameObjects . push ( user ) // refresh cash of user every 1000/10=100ms loop . calls . push (() => { console . clear () console . log ( user . resourceBag [ cash . slug ]) }) // let's go loop . start ()","title":"Example"},{"location":"getting-started/","text":"Getting Started with Quarkit # For full documentation visit mkdocs.org . Commands # mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout # 1 2 3 4 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Getting Started with Quarkit"},{"location":"getting-started/#getting-started-with-quarkit","text":"For full documentation visit mkdocs.org .","title":"Getting Started with Quarkit"},{"location":"getting-started/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"getting-started/#project-layout","text":"1 2 3 4 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"quarks/","text":"Quarkit core quarks # Quark # Methods # clone ( ) getQuark ( ) Static Properties # quark = Quark createQuark ( name ) getDeepConf ( ) getConf ( ) Static Properties Descriptors # quarks Deep configuration # quarks = ['Quark'] Gameobject # Parents # Quark Interop Properties # slug = runtime generated Methods # equals ( gameObject ) Static Properties # quark = GameObject Deep configuration # quarks = ['GameObject'] interop = {'methods': {'loop': {'type': 'loop', 'uniq': 'true', 'methods': [{'type': 'function', 'name': '', 'args': [], 'hash': 'f20b1c6d187bff1b1c0bf22c7ac3efb4730f2a7cdcdb9f82096d7d8f8524a112'}]}, 'getRelated': {'type': 'flattenDeep', 'uniq': 'true', 'methods': []}, 'loopRelated': {'type': 'loop', 'uniq': 'true', 'methods': []}}} Gameloop # Parents # Quark Properties # tps = 10 gameObjects = [] calls = [] interval = {} started = false processing = false Methods # loop ( ) start ( ) stop ( ) Static Properties # quark = GameLoop Deep configuration # quarks = ['GameLoop'] Interop # Parents # Quark Static Properties # quark = Interop interopMethodTypes = {'flattenDeep': 'flattenDeep', 'reduce': 'reduce', 'every': 'every', 'loop': 'loop'} createInteropMethod ( name, descriptor ) implementInteropMethod ( name, method ) Deep configuration # quarks = ['Interop'] interop = {'methods': {}} Resource # Parents # Quark Interop GameObject Properties # premium = false Static Properties # quark = Resource argOverProp ( ) Deep configuration # quarks = ['Resource'] ArgOverProp = ['premium'] Resourcebag # Parents # Quark Interop GameObject CostHandler Methods # addResource ( res, num ) subResource ( res, num ) getResource ( resource ) Static Properties # quark = ResourceBag Deep configuration # quarks = ['ResourceBag'] interop = {'methods': {'loop': {'methods': [{'type': 'function', 'name': '', 'args': [], 'hash': 'f20b1c6d187bff1b1c0bf22c7ac3efb4730f2a7cdcdb9f82096d7d8f8524a112'}]}, 'applyCostList': {'methods': [{'type': 'function', 'name': '', 'args': ['list', 'order'], 'hash': '4f3db0b2e1e7bdd21a7d27d5358160fcae840cfab94f0a3ba150548e13e30637'}]}, 'canApplyCostList': {'methods': [{'type': 'function', 'name': '', 'args': ['list', 'order'], 'hash': 'd00085c67c82209b32ea26bbafae6e03fbafb4cdee2bd604df589454b188b652'}]}}} Cost # Parents # Quark Interop GameObject Expr Methods # createExpressionResolver ( expr ) createContext ( ...args ) collectModifiers ( tags, ...args ) setCost ( list, gameObject, amount ) getCostList ( list, go=null ) Static Properties # quark = Cost Deep configuration # quarks = ['Expr', 'Cost'] interop = {'methods': {'modifiers': {'type': 'flattenDeep', 'uniq': 'true', 'methods': []}}} Costhandler # Parents # Quark Interop GameObject Static Properties # quark = CostHandler Deep configuration # quarks = ['CostHandler'] interop = {'methods': {'applyCostList': {'type': 'reduce', 'uniq': 'true', 'methods': []}, 'canApplyCostList': {'type': 'every', 'uniq': 'true', 'methods': []}}} Possessor # Parents # Quark Interop GameObject CostHandler Properties # possessions = [] Methods # addPosession ( go ) Static Properties # quark = Possessor Deep configuration # quarks = ['Possessor'] interop = {'methods': {'loop': {'methods': [{'type': 'function', 'name': '', 'args': [], 'hash': 'f20b1c6d187bff1b1c0bf22c7ac3efb4730f2a7cdcdb9f82096d7d8f8524a112'}]}, 'getRelated': {'methods': [{'type': 'function', 'name': '', 'args': [], 'hash': '51620e6f3bc2a304ee95813adbb60a26ab5c61eb50803b8933914761d461fc31'}]}}} Purchasable # Parents # Quark Interop GameObject Expr Cost Methods # setPurchaseCost ( gameObject, amount ) canPurchaseFor ( go ) purchaseFor ( go ) Static Properties # quark = Purchasable Deep configuration # quarks = ['Purchasable'] interop = {'methods': {'loop': {'methods': [{'type': 'function', 'name': '', 'args': [], 'hash': 'f20b1c6d187bff1b1c0bf22c7ac3efb4730f2a7cdcdb9f82096d7d8f8524a112'}]}}} purchase = {'costList': 'price'} Production # Parents # Quark Interop GameObject Expr Cost Properties # productionTime = 1000 lastProductionTime = {} Methods # setProduction ( gameObject, amount ) getLastProductionTime ( ) applyProduction ( go ) Static Properties # quark = Production argOverProp ( ) Deep configuration # quarks = ['Production'] interop = {'methods': {'loop': {'methods': [{'type': 'function', 'name': '', 'args': [], 'hash': 'f20b1c6d187bff1b1c0bf22c7ac3efb4730f2a7cdcdb9f82096d7d8f8524a112'}]}, 'loopRelated': {'methods': [{'type': 'function', 'name': '', 'args': ['go'], 'hash': '0fb16d469184e781aae6a0bada7079f64a7ae642a78efeb6b30c5c4a705e3e6a'}]}}} ArgOverProp = ['productionTime'] production = {'costList': 'production'} Level # Parents # Quark Interop GameObject Expr Cost Properties # level = 1 Methods # setLevelCost ( gameObject, amount ) canLevelUp ( go ) levelUp ( go ) Static Properties # quark = Level Deep configuration # quarks = ['Level'] interop = {'methods': {'loop': {'methods': [{'type': 'function', 'name': '', 'args': [], 'hash': 'f20b1c6d187bff1b1c0bf22c7ac3efb4730f2a7cdcdb9f82096d7d8f8524a112'}]}}} level = {'costList': 'level'}","title":"Quarkit core quarks"},{"location":"quarks/#quarkit-core-quarks","text":"","title":"Quarkit core quarks"},{"location":"quarks/#quark","text":"","title":"Quark"},{"location":"quarks/#methods","text":"clone ( ) getQuark ( )","title":"Methods"},{"location":"quarks/#static-properties","text":"quark = Quark createQuark ( name ) getDeepConf ( ) getConf ( )","title":"Static Properties"},{"location":"quarks/#static-properties-descriptors","text":"quarks","title":"Static Properties Descriptors"},{"location":"quarks/#deep-configuration","text":"quarks = ['Quark']","title":"Deep configuration"},{"location":"quarks/#gameobject","text":"","title":"Gameobject"},{"location":"quarks/#parents","text":"Quark Interop","title":"Parents"},{"location":"quarks/#properties","text":"slug = runtime generated","title":"Properties"},{"location":"quarks/#methods_1","text":"equals ( gameObject )","title":"Methods"},{"location":"quarks/#static-properties_1","text":"quark = GameObject","title":"Static Properties"},{"location":"quarks/#deep-configuration_1","text":"quarks = ['GameObject'] interop = {'methods': {'loop': {'type': 'loop', 'uniq': 'true', 'methods': [{'type': 'function', 'name': '', 'args': [], 'hash': 'f20b1c6d187bff1b1c0bf22c7ac3efb4730f2a7cdcdb9f82096d7d8f8524a112'}]}, 'getRelated': {'type': 'flattenDeep', 'uniq': 'true', 'methods': []}, 'loopRelated': {'type': 'loop', 'uniq': 'true', 'methods': []}}}","title":"Deep configuration"},{"location":"quarks/#gameloop","text":"","title":"Gameloop"},{"location":"quarks/#parents_1","text":"Quark","title":"Parents"},{"location":"quarks/#properties_1","text":"tps = 10 gameObjects = [] calls = [] interval = {} started = false processing = false","title":"Properties"},{"location":"quarks/#methods_2","text":"loop ( ) start ( ) stop ( )","title":"Methods"},{"location":"quarks/#static-properties_2","text":"quark = GameLoop","title":"Static Properties"},{"location":"quarks/#deep-configuration_2","text":"quarks = ['GameLoop']","title":"Deep configuration"},{"location":"quarks/#interop","text":"","title":"Interop"},{"location":"quarks/#parents_2","text":"Quark","title":"Parents"},{"location":"quarks/#static-properties_3","text":"quark = Interop interopMethodTypes = {'flattenDeep': 'flattenDeep', 'reduce': 'reduce', 'every': 'every', 'loop': 'loop'} createInteropMethod ( name, descriptor ) implementInteropMethod ( name, method )","title":"Static Properties"},{"location":"quarks/#deep-configuration_3","text":"quarks = ['Interop'] interop = {'methods': {}}","title":"Deep configuration"},{"location":"quarks/#resource","text":"","title":"Resource"},{"location":"quarks/#parents_3","text":"Quark Interop GameObject","title":"Parents"},{"location":"quarks/#properties_2","text":"premium = false","title":"Properties"},{"location":"quarks/#static-properties_4","text":"quark = Resource argOverProp ( )","title":"Static Properties"},{"location":"quarks/#deep-configuration_4","text":"quarks = ['Resource'] ArgOverProp = ['premium']","title":"Deep configuration"},{"location":"quarks/#resourcebag","text":"","title":"Resourcebag"},{"location":"quarks/#parents_4","text":"Quark Interop GameObject CostHandler","title":"Parents"},{"location":"quarks/#methods_3","text":"addResource ( res, num ) subResource ( res, num ) getResource ( resource )","title":"Methods"},{"location":"quarks/#static-properties_5","text":"quark = ResourceBag","title":"Static Properties"},{"location":"quarks/#deep-configuration_5","text":"quarks = ['ResourceBag'] interop = {'methods': {'loop': {'methods': [{'type': 'function', 'name': '', 'args': [], 'hash': 'f20b1c6d187bff1b1c0bf22c7ac3efb4730f2a7cdcdb9f82096d7d8f8524a112'}]}, 'applyCostList': {'methods': [{'type': 'function', 'name': '', 'args': ['list', 'order'], 'hash': '4f3db0b2e1e7bdd21a7d27d5358160fcae840cfab94f0a3ba150548e13e30637'}]}, 'canApplyCostList': {'methods': [{'type': 'function', 'name': '', 'args': ['list', 'order'], 'hash': 'd00085c67c82209b32ea26bbafae6e03fbafb4cdee2bd604df589454b188b652'}]}}}","title":"Deep configuration"},{"location":"quarks/#cost","text":"","title":"Cost"},{"location":"quarks/#parents_5","text":"Quark Interop GameObject Expr","title":"Parents"},{"location":"quarks/#methods_4","text":"createExpressionResolver ( expr ) createContext ( ...args ) collectModifiers ( tags, ...args ) setCost ( list, gameObject, amount ) getCostList ( list, go=null )","title":"Methods"},{"location":"quarks/#static-properties_6","text":"quark = Cost","title":"Static Properties"},{"location":"quarks/#deep-configuration_6","text":"quarks = ['Expr', 'Cost'] interop = {'methods': {'modifiers': {'type': 'flattenDeep', 'uniq': 'true', 'methods': []}}}","title":"Deep configuration"},{"location":"quarks/#costhandler","text":"","title":"Costhandler"},{"location":"quarks/#parents_6","text":"Quark Interop GameObject","title":"Parents"},{"location":"quarks/#static-properties_7","text":"quark = CostHandler","title":"Static Properties"},{"location":"quarks/#deep-configuration_7","text":"quarks = ['CostHandler'] interop = {'methods': {'applyCostList': {'type': 'reduce', 'uniq': 'true', 'methods': []}, 'canApplyCostList': {'type': 'every', 'uniq': 'true', 'methods': []}}}","title":"Deep configuration"},{"location":"quarks/#possessor","text":"","title":"Possessor"},{"location":"quarks/#parents_7","text":"Quark Interop GameObject CostHandler","title":"Parents"},{"location":"quarks/#properties_3","text":"possessions = []","title":"Properties"},{"location":"quarks/#methods_5","text":"addPosession ( go )","title":"Methods"},{"location":"quarks/#static-properties_8","text":"quark = Possessor","title":"Static Properties"},{"location":"quarks/#deep-configuration_8","text":"quarks = ['Possessor'] interop = {'methods': {'loop': {'methods': [{'type': 'function', 'name': '', 'args': [], 'hash': 'f20b1c6d187bff1b1c0bf22c7ac3efb4730f2a7cdcdb9f82096d7d8f8524a112'}]}, 'getRelated': {'methods': [{'type': 'function', 'name': '', 'args': [], 'hash': '51620e6f3bc2a304ee95813adbb60a26ab5c61eb50803b8933914761d461fc31'}]}}}","title":"Deep configuration"},{"location":"quarks/#purchasable","text":"","title":"Purchasable"},{"location":"quarks/#parents_8","text":"Quark Interop GameObject Expr Cost","title":"Parents"},{"location":"quarks/#methods_6","text":"setPurchaseCost ( gameObject, amount ) canPurchaseFor ( go ) purchaseFor ( go )","title":"Methods"},{"location":"quarks/#static-properties_9","text":"quark = Purchasable","title":"Static Properties"},{"location":"quarks/#deep-configuration_9","text":"quarks = ['Purchasable'] interop = {'methods': {'loop': {'methods': [{'type': 'function', 'name': '', 'args': [], 'hash': 'f20b1c6d187bff1b1c0bf22c7ac3efb4730f2a7cdcdb9f82096d7d8f8524a112'}]}}} purchase = {'costList': 'price'}","title":"Deep configuration"},{"location":"quarks/#production","text":"","title":"Production"},{"location":"quarks/#parents_9","text":"Quark Interop GameObject Expr Cost","title":"Parents"},{"location":"quarks/#properties_4","text":"productionTime = 1000 lastProductionTime = {}","title":"Properties"},{"location":"quarks/#methods_7","text":"setProduction ( gameObject, amount ) getLastProductionTime ( ) applyProduction ( go )","title":"Methods"},{"location":"quarks/#static-properties_10","text":"quark = Production argOverProp ( )","title":"Static Properties"},{"location":"quarks/#deep-configuration_10","text":"quarks = ['Production'] interop = {'methods': {'loop': {'methods': [{'type': 'function', 'name': '', 'args': [], 'hash': 'f20b1c6d187bff1b1c0bf22c7ac3efb4730f2a7cdcdb9f82096d7d8f8524a112'}]}, 'loopRelated': {'methods': [{'type': 'function', 'name': '', 'args': ['go'], 'hash': '0fb16d469184e781aae6a0bada7079f64a7ae642a78efeb6b30c5c4a705e3e6a'}]}}} ArgOverProp = ['productionTime'] production = {'costList': 'production'}","title":"Deep configuration"},{"location":"quarks/#level","text":"","title":"Level"},{"location":"quarks/#parents_10","text":"Quark Interop GameObject Expr Cost","title":"Parents"},{"location":"quarks/#properties_5","text":"level = 1","title":"Properties"},{"location":"quarks/#methods_8","text":"setLevelCost ( gameObject, amount ) canLevelUp ( go ) levelUp ( go )","title":"Methods"},{"location":"quarks/#static-properties_11","text":"quark = Level","title":"Static Properties"},{"location":"quarks/#deep-configuration_11","text":"quarks = ['Level'] interop = {'methods': {'loop': {'methods': [{'type': 'function', 'name': '', 'args': [], 'hash': 'f20b1c6d187bff1b1c0bf22c7ac3efb4730f2a7cdcdb9f82096d7d8f8524a112'}]}}} level = {'costList': 'level'}","title":"Deep configuration"}]}